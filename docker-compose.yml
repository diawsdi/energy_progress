version: '3.8'

services:
  # PostgreSQL with PostGIS extension
  energy_progress_postgres:
    image: postgis/postgis:15-3.4
    ports:
      - "5439:5432"
    environment:
      POSTGRES_USER: energy_user
      POSTGRES_PASSWORD: energy_password
      POSTGRES_DB: energy_progress
    volumes:
      - energy_progress_postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U energy_user -d energy_progress"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - energy_progress_network
    restart: unless-stopped

  # MinIO for object storage
  energy_progress_minio:
    image: minio/minio:RELEASE.2024-01-16T16-07-38Z
    ports:
      - "9009:9000"      # API
      - "9010:9001"      # Console
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - energy_progress_minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - energy_progress_network
    restart: unless-stopped

  # MinIO client to set up buckets and policies
  energy_progress_minio_client:
    image: minio/mc:latest
    depends_on:
      - energy_progress_minio
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      /usr/bin/mc alias set energy_progress_minio http://energy_progress_minio:9000 admin minioadmin;
      /usr/bin/mc mb --ignore-existing energy_progress_minio/rasters;
      /usr/bin/mc mb --ignore-existing energy_progress_minio/tiles;
      /usr/bin/mc policy set download energy_progress_minio/tiles;
      exit 0;
      "
    networks:
      - energy_progress_network

  # ETL Processing Service
  energy_progress_etl:
    build:
      context: ./etl
      dockerfile: Dockerfile
    depends_on:
      - energy_progress_postgres
      - energy_progress_minio_client
    volumes:
      - ./etl:/app
      - energy_progress_tmp_data:/tmp
      - ./energy_progress.json:/app/energy_progress.json
    networks:
      - energy_progress_network
    environment:
      - POSTGRES_HOST=energy_progress_postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=energy_progress
      - POSTGRES_USER=energy_user
      - POSTGRES_PASSWORD=energy_password
      - MINIO_HOST=energy_progress_minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=admin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_SECURE=False
      - MINIO_ENDPOINT_URL=http://energy_progress_minio:9000
      - MINIO_BUCKET_RASTERS=energy_progress_rasters
      - MINIO_BUCKET_TILES=energy_progress_tiles
      - GOOGLE_APPLICATION_CREDENTIALS=/app/energy_progress.json
      - PYTHONUNBUFFERED=1
    restart: unless-stopped
    command: >
      bash -c "
        echo 'Waiting for 15 seconds for other services to be fully available...'
        sleep 15
        python scheduler.py
      "

  # FastAPI Service
  energy_progress_api:
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
      - "8009:8000"
    depends_on:
      - energy_progress_postgres
      - energy_progress_minio
    environment:
      - POSTGRES_HOST=energy_progress_postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=energy_progress
      - POSTGRES_USER=energy_user
      - POSTGRES_PASSWORD=energy_password
      - MINIO_HOST=energy_progress_minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=admin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_SECURE=False
      - MINIO_ENDPOINT_URL=http://energy_progress_minio:9000
      - MINIO_PUBLIC_ENDPOINT=http://localhost:9009
      - MINIO_BUCKET_RASTERS=energy_progress_rasters
      - MINIO_BUCKET_TILES=energy_progress_tiles
    networks:
      - energy_progress_network
    restart: unless-stopped
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]

networks:
  energy_progress_network:
    driver: bridge

volumes:
  energy_progress_postgres_data:
  energy_progress_minio_data:
  energy_progress_tmp_data: